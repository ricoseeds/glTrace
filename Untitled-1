	// int dpi = 72;
	int width = SCREEN_WIDTH;
	int height = SCREEN_HEIGHT;
	int n = width*height;
	// RGBType *pixels = new RGBType[n];
	
	int aadepth = 1;
	double aathreshold = 0.1;
	double aspectratio = (double)width/(double)height;
	double ambientlight = 0.2;
	double accuracy = 0.00000001;
	
	Vect O (0,0,0);
	Vect X (1,0,0);
	Vect Y (0,1,0);
	Vect Z (0,0,1);
	
	Vect new_sphere_location (1.75, -0.25, 0);
	Vect new_sphere_location2 (2.75, -0.80, 0);
	Vect plane_loc(0.2, 1, 0.1);
	Vect campos (3, 1.5, -20);
	
	Vect look_at (0, 6, 0);
	Vect diff_btw (campos.getVectX() - look_at.getVectX(), campos.getVectY() - look_at.getVectY(), campos.getVectZ() - look_at.getVectZ());
	
	Vect camdir = diff_btw.negative().normalize();
	Vect camright = Y.crossProduct(camdir).normalize();
	Vect camdown = camright.crossProduct(camdir);
	Camera scene_cam (campos, camdir, camright, camdown);
	
	Color white_light (1.0, 1.0, 1.0, 0.0);
	Color pretty_green (0.0, 1.0, 0.0, 0.5);
	Color maroon (1.0, 0.0, 0.0, 0.5);
	Color tile_floor (1, 1, 1, 2);
	Color gray (0.5, 0.5, 0.5, 0);
	Color black (0.0, 0.0, 0.0, 0);
	Color blue (0.0, 0.0, 1.0, 0.4);
	Color blue_solid (0.0, 0.0, 1.0, 0);
	Color vio(0.8, 0.4, 0.5, 0.0);
	Vect light_position (-7,10,-10);
	Vect light_position2 (-7,10,10);
	Light scene_light (light_position, white_light);
	Light scene_light2 (light_position2, white_light);
	vector<Light*> light_sources;
	light_sources.push_back(dynamic_cast<Light*>(&scene_light));
	light_sources.push_back(dynamic_cast<Light*>(&scene_light2));
	Quadric qq;
	
	// scene objects
	Sphere scene_sphere (Z, 1, pretty_green);
	Sphere scene_sphere2 (new_sphere_location.vectAdd(Vect(4, 5, -10)), 2, Color(0,0,0,1));
	Sphere scene_sphere3 (new_sphere_location2, 0.5, blue);
	int b = 8, a = 6;
	Triangle tri(Vect(-b, 0, 0), Vect(-b, 0, a), Vect(a-b, 0, 0), vio);
	Triangle tri2(Vect(a-b, 0, 0), Vect(-b, 0, a), Vect(a-b, 0, a), vio);
	

	Triangle tri3(Vect(b, 0, 0), Vect(b + 4, 0, 0), Vect(b + 2, 4, 0), blue_solid);
	Triangle tri4(Vect(b, 4, 0), Vect(b + 4, 4, 0), Vect(b + 2, 9, 0), blue_solid);

	// Plane scene_plane (X, -1, tile_floor);
	// Plane scene_plane2 (plane_loc, white_light);
	Plane scene_plane2 (Y.vectAdd(Vect(0, 5, 0)), white_light);
	vector<Object*> scene_objects;
	scene_objects.push_back(dynamic_cast<Object*>(&scene_sphere));
	scene_objects.push_back(dynamic_cast<Object*>(&scene_sphere2));
	scene_objects.push_back(dynamic_cast<Object*>(&scene_plane2));
	scene_objects.push_back(dynamic_cast<Object*>(&scene_sphere3));
	scene_objects.push_back(dynamic_cast<Object*>(&qq));
	scene_objects.push_back(dynamic_cast<Object*>(&tri));
	scene_objects.push_back(dynamic_cast<Object*>(&tri2));
	scene_objects.push_back(dynamic_cast<Object*>(&tri3));
	scene_objects.push_back(dynamic_cast<Object*>(&tri4));